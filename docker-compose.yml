services:
  bankmicroservices.apigateway:
    image: ${DOCKER_REGISTRY-}bankmicroservicesapigateway
    build:
      context: .
      dockerfile: BankMicroservices.APIGateway/Dockerfile
    ports:
        - "7144:7144"

  bankmicroservices.client:
    image: ${DOCKER_REGISTRY-}bankmicroservicesclient
    build:
      context: .
      dockerfile: BankMicroservices.Client/Dockerfile
    depends_on:
      client-database:
        condition: service_healthy
      bankmicroservices.apigateway:
        condition: service_started
    networks:
      - redis-network
      
  redis:
    image: redis
    ports:
      - "16379:6379"
    networks:
      - redis-network

  client-database:
    image: mysql:8.0.41
    container_name: client-mysqldb
    ports:
      - "3307:3306"
    expose: 
      - 3306
    volumes:
      - db-client-volume:/var/lib/mysql
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: bank_microservices_client
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', '127.0.0.1', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  bankmicroservices.email:
    image: ${DOCKER_REGISTRY-}bankmicroservicesemail
    build:
      context: .
      dockerfile: BankMicroservices.Email/Dockerfile
    depends_on:
      email-database:
        condition: service_healthy
      bankmicroservices.apigateway:
        condition: service_started

  email-database:
    image: mysql:8.0.41
    container_name: email-mysqldb
    ports:
      - "3308:3306"
    expose: 
      - 3306
    volumes:
      - db-email-volume:/var/lib/mysql
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: bank_microservices_email
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', '127.0.0.1', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  bankmicroservices.identityserver:
    image: ${DOCKER_REGISTRY-}bankmicroservicesidentityserver
    build:
      context: .
      dockerfile: BankMicroservices.IdentityServer/Dockerfile
    depends_on:
      identity-database:
        condition: service_healthy
      bankmicroservices.apigateway:
        condition: service_started
        
  identity-database:
    image: mysql:8.0.41
    container_name: identity-mysqldb
    ports:
      - "3309:3306"
    expose: 
      - 3306
    volumes:
      - db-identity-volume:/var/lib/mysql
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: bank_microservices_identity_server
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', '127.0.0.1', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  bankmicroservices.log:
    image: ${DOCKER_REGISTRY-}bankmicroserviceslog
    build:
      context: .
      dockerfile: BankMicroservices.Log/Dockerfile
    depends_on:
      log-database:
        condition: service_healthy
      bankmicroservices.apigateway:
        condition: service_started
        
  log-database:
    image: mysql:8.0.41
    container_name: log-mysqldb
    ports:
      - "3310:3306"
    expose: 
      - 3306
    volumes:
      - db-log-volume:/var/lib/mysql
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: bank_microservices_log
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', '127.0.0.1', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  bankmicroservices.notification:
    image: ${DOCKER_REGISTRY-}bankmicroservicesnotification
    build:
      context: .
      dockerfile: BankMicroservices.Notification/Dockerfile
    depends_on:
      notification-database:
        condition: service_healthy
      bankmicroservices.apigateway:
        condition: service_started

  notification-database:
    image: mysql:8.0.41
    container_name: notification-mysqldb
    ports:
      - "3311:3306"
    expose: 
      - 3306
    volumes:
      - db-notification-volume:/var/lib/mysql
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: bank_microservices_notification
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', '127.0.0.1', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  bankmicroservices.transfer:
    image: ${DOCKER_REGISTRY-}bankmicroservicestransfer
    build:
      context: .
      dockerfile: BankMicroservices.Transfer/Dockerfile
    depends_on:
      transfer-database:
        condition: service_healthy
      bankmicroservices.apigateway:
        condition: service_started
 
  transfer-database:
    image: mysql:8.0.41
    container_name: transfer-mysqldb
    ports:
      - "3312:3306"
    expose: 
      - 3306
    volumes:
      - db-transfer-volume:/var/lib/mysql
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: bank_microservices_transfer
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', '127.0.0.1', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  rabbitmq:
    image: rabbitmq:3-management
    command: rabbitmq-server
    ports:
      - "15672:15672"
    expose:
      - "5672"
      - "15672"

networks: 
  redis-network:
     driver: bridge

volumes:
   db-transfer-volume:
   db-notification-volume:
   db-identity-volume:
   db-email-volume:
   db-client-volume:
   db-log-volume: